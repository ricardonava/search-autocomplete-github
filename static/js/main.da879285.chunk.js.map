{"version":3,"sources":["hooks/useFetchSuspense.ts","components/Issues/Issues.tsx","utils/contrastText.ts","components/Loading/Loading.tsx","components/Searchbar/Searchbar.tsx","components/Welcome/Welcome.tsx","App.tsx","hooks/useDebounce.ts","index.tsx"],"names":["cache","LRU","useFetchSuspense","url","fetchOptions","key","md5","JSON","stringify","value","get","status","data","promise","fetch","then","response","json","set","produce","draft","Issues","memo","props","debouncedQuery","issues","items","count","total_count","errorMessage","message","replace","className","length","map","issue","id","href","html_url","rel","target","state","title","labels","label","style","backgroundColor","color","hexcolor","slice","split","hex","join","parseInt","substr","name","Loading","Searchbar","query","setQuery","type","placeholder","onChange","event","Welcome","App","screen","useState","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da879285.chunk.js","sourcesContent":["import LRU from 'lru-cache'\nimport md5 from 'md5'\nimport produce from 'immer'\n\nconst cache = new LRU(50)\n\nconst useFetchSuspense = (url: any, fetchOptions = {}) => {\n  const key = `${url}.${md5(JSON.stringify(fetchOptions))}`\n  const value: any = cache.get(key) || { status: 'new', data: null }\n  if (value.status === 'resolved') {\n    return value.data\n  }\n\n  const promise = fetch(url, fetchOptions).then((response) => response.json())\n\n  promise.then((data) => {\n    cache.set(\n      key,\n      produce(value, (draft: any) => {\n        draft.status = 'resolved'\n        draft.data = data\n      })\n    )\n  })\n\n  throw promise\n}\n\nexport default useFetchSuspense\n","import React, { memo } from 'react'\nimport useFetchSuspense from '../../hooks/useFetchSuspense'\nimport contrastText from '../../utils/contrastText'\nimport './issues.css'\n\ninterface CustomInputProps {\n  debouncedQuery: string;\n}\n\nconst Issues = memo<CustomInputProps>(\n  props => {\n    const { debouncedQuery } = props\n    const url = `https://api.github.com/search/issues?q=${debouncedQuery}+in:title+repo:facebook/react+state:open&per_page=100`\n    const data = useFetchSuspense(url)\n    const { items: issues, total_count: count, message: errorMessage } = data\n\n    if (errorMessage) {\n      const message = errorMessage.replace(/ .*/, '')\n      if (message === 'API') {\n        return <h1>Hey speedy hold on, your searching to fast!!</h1>\n      }\n      return <h1>Unknown error please try again.</h1>\n    }\n\n    if (count === 0) {\n      return <h1>No issues found that match \"{debouncedQuery}\"</h1>\n    }\n\n    return (\n      <div className=\"issues\">\n        <div className=\"issues-title\">\n          <h1>\n            Last {issues.length !== 1 && issues.length} <span>OPEN</span>{' '}\n            {issues.length > 1 ? 'issues' : 'issue'} that{' '}\n            {issues.length > 1 ? 'match' : 'matches'} \"{issues && debouncedQuery}\n          \".\n        </h1>\n        </div>\n        <ul className=\"issues-list\">\n          {issues.map((issue: any) => <li key={issue.id}>\n            <a\n              className=\"title\"\n              href={issue.html_url}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <div className=\"issue\">\n                <div className=\"issue-status\">{issue.state}</div>\n                <div className=\"issue-title\">{issue.title}</div>\n                <div className=\"issue-labels\">\n                  {issue.labels.map((label: any) => <div\n                    className=\"issue-label\"\n                    key={label.id}\n                    style={{\n                      backgroundColor: `#${label.color}`,\n                      color: `${contrastText(label.color)}`,\n                    }}\n                  >\n                    {label.name}\n                  </div>)}\n                </div>\n              </div>\n            </a>\n          </li>)}\n        </ul>\n      </div>\n    )\n  })\n\nexport default Issues\n","export default function contrastText(hexcolor: string) {\n  /*!\n   * Get the contrasting color for any hex color\n   * (c) 2019 Chris Ferdinandi, MIT License, https://gomakethings.com\n   * Derived from work by Brian Suda, https://24ways.org/2010/calculating-color-contrast/\n   */\n\n  // If a leading # is provided, remove it\n  if (hexcolor.slice(0, 1) === '#') {\n    hexcolor = hexcolor.slice(1)\n  }\n\n  // If a three-character hexcode, make six-character\n  if (hexcolor.length === 3) {\n    hexcolor = hexcolor\n      .split('')\n      .map(function (hex: string) {\n        return hex + hex\n      })\n      .join('')\n  }\n\n  // Convert to RGB value\n  const r = parseInt(hexcolor.substr(0, 2), 16)\n  const g = parseInt(hexcolor.substr(2, 2), 16)\n  const b = parseInt(hexcolor.substr(4, 2), 16)\n\n  // Get YIQ ratio\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000\n\n  // Check contrast\n  return yiq >= 128 ? 'black' : 'white'\n}\n","import React from 'react'\nimport './loading.css'\n\nconst Loading = () => (\n  <div className=\"loading\">\n    {/* fallback to loading text if needed */}\n    <div className=\"loader\">Loading...</div>\n  </div>\n)\n\nexport default Loading\n","import React from 'react'\nimport './searchbar.css'\n\nconst Searchbar = ({\n  query,\n  setQuery\n}: any) => {\n  const handleChange = (event: any) => {\n    setQuery(event.target.value)\n  }\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        className=\"searchTerm\"\n        placeholder=\"Search OPEN React issues...\"\n        value={query}\n        onChange={handleChange}\n      />\n    </div>\n  )\n}\n\nexport default Searchbar\n","import React from 'react'\nimport './welcome.css'\n\nconst Welcome = () => (\n  <div className=\"welcome\">\n    <h1>Welcome to REACT ISSUES.</h1>\n    <h3>Navigate autocomplete with TAB.</h3>\n  </div>\n)\n\nexport default Welcome\n","import React, { Suspense, useState } from 'react'\nimport Issues from './components/Issues/Issues'\nimport Loading from './components/Loading/Loading'\nimport Searchbar from './components/Searchbar/Searchbar'\nimport Welcome from './components/Welcome/Welcome'\nimport useDebounce from './hooks/useDebounce'\n\nconst App = () => {\n  const [query, setQuery] = useState('')\n  const debouncedQuery = useDebounce(query, 700)\n\n  let screen\n\n  if (!debouncedQuery) {\n    screen = <Welcome />\n  }\n\n  if (debouncedQuery) {\n    screen = (\n      <Suspense fallback={<Loading />}>\n        <Issues debouncedQuery={debouncedQuery} />\n      </Suspense>\n    )\n  }\n\n  return (\n    <div className=\"grid-container\">\n      <header>\n        <Searchbar query={query} setQuery={setQuery} />\n      </header>\n      <main>\n        <div className=\"content\">\n          <div className=\"main\">{screen}</div>\n        </div>\n      </main>\n      <footer>React's got issues.</footer>\n    </div>\n  )\n}\n\nexport default App\n","import { useEffect, useState } from 'react'\n\n// Debounce Hook\nexport default function useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than \"delay\".\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    // linter complains if you don't list all dependencies\n    [value, delay]\n  )\n\n  return debouncedValue\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}